// !!! This C++ file is generated by ioStudio !!!
#include "pch.h"
#pragma hdrstop
#include "ioSystemData.h"
TypeUnit::TypeUnit()
{
}
TypeUnit::~TypeUnit()
{
}
Bool TypeUnit::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"m/s"); return TRUE;
    case 1: enumText->Set((ioChars)"kt"); return TRUE;
    case 2: enumText->Set((ioChars)"kg"); return TRUE;
    case 3: enumText->Set((ioChars)"nm"); return TRUE;
    case 4: enumText->Set((ioChars)"m"); return TRUE;
    case 5: enumText->Set((ioChars)"Â°C"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
StationModeType::StationModeType()
{
}
StationModeType::~StationModeType()
{
}
Bool StationModeType::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"No command"); return TRUE;
    case 1: enumText->Set((ioChars)"Taken"); return TRUE;
    case 2: enumText->Set((ioChars)"Remote control"); return TRUE;
    case 3: enumText->Set((ioChars)"Taken and locked"); return TRUE;
    case 4: enumText->Set((ioChars)"Take over request"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
ioSystemData::ioSystemData()
{
}
ioSystemData::~ioSystemData()
{
}
Int32 ioSystemData::GetDataID(ioSystemDataType duid)
{
    return (Int32)duid;
}
ioSystemDataType ioSystemData::GetDataType(Int32 duidValue)
{
    switch (duidValue)
    {
    default: return Duid_NotDefined; 
    case 0: return Duid_NotDefined; 
    case 3: return Duid_Victron_Charge_VoltInputAc; 
    case 4: return Duid_Victron_Charge_VoltOutputDc; 
    case 5: return Duid_Victron_Charge_IsOutputActive; 
    case 20: return Duid_Victron_DcDc_VoltInput; 
    case 1: return Duid_Victron_DcDc_VoltOutput; 
    case 2: return Duid_Victron_DcDc_IsOutputActive; 
    } // switch
}
