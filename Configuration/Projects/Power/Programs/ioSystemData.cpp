// !!! This C++ file is generated by ioStudio !!!
#include "pch.h"
#pragma hdrstop
#include "ioSystemData.h"
TypeUnit::TypeUnit()
{
}
TypeUnit::~TypeUnit()
{
}
Bool TypeUnit::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"m/s"); return TRUE;
    case 1: enumText->Set((ioChars)"kt"); return TRUE;
    case 2: enumText->Set((ioChars)"kg"); return TRUE;
    case 3: enumText->Set((ioChars)"nm"); return TRUE;
    case 4: enumText->Set((ioChars)"m"); return TRUE;
    case 5: enumText->Set((ioChars)"Â°C"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
StationModeType::StationModeType()
{
}
StationModeType::~StationModeType()
{
}
Bool StationModeType::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"No command"); return TRUE;
    case 1: enumText->Set((ioChars)"Taken"); return TRUE;
    case 2: enumText->Set((ioChars)"Remote control"); return TRUE;
    case 3: enumText->Set((ioChars)"Taken and locked"); return TRUE;
    case 4: enumText->Set((ioChars)"Take over request"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
ioSystemData::ioSystemData()
{
}
ioSystemData::~ioSystemData()
{
}
Int32 ioSystemData::GetDataID(ioSystemDataType duid)
{
    return (Int32)duid;
}
ioSystemDataType ioSystemData::GetDataType(Int32 duidValue)
{
    switch (duidValue)
    {
    default: return Duid_NotDefined; 
    case 0: return Duid_NotDefined; 
    case 40: return Duid_Ids_Consume_TakeCommandPow; 
    case 41: return Duid_Ids_Consume_ReleaseCommandPow; 
    case 42: return Duid_Ids_Consume_ActiveStationPow; 
    case 43: return Duid_Ids_Consume_OnChangeCommandPow; 
    case 44: return Duid_Ids_Consume_StationModePow; 
    case 45: return Duid_Ids_Consume_PowModeIdle; 
    case 46: return Duid_Ids_Consume_PowModeShore; 
    case 47: return Duid_Ids_Consume_PowModeDisconnect; 
    case 48: return Duid_Ids_Consume_PowModeTransitDay; 
    case 49: return Duid_Ids_Consume_PowModeTransitNightEngine; 
    case 50: return Duid_Ids_Consume_PowModeTransitNightSail; 
    case 51: return Duid_Ids_Consume_PowMode; 
    case 52: return Duid_Ids_Consume_OnChangePowMode; 
    case 53: return Duid_Ids_Consume_IsOutputOn1; 
    case 54: return Duid_Ids_Consume_IsOutputOn2; 
    case 55: return Duid_Ids_Consume_IsOutputOn3; 
    case 56: return Duid_Ids_Consume_IsOutputOn4; 
    case 57: return Duid_Ids_Consume_IsOutputOn5; 
    case 58: return Duid_Ids_Consume_IsOutputOn6; 
    case 59: return Duid_Ids_Consume_IsOutputOn7; 
    case 60: return Duid_Ids_Consume_IsOutputOn8; 
    case 20: return Duid_Ids_Convert_VoltageInputAc; 
    case 22: return Duid_Ids_Convert_IsChargingActive; 
    case 3: return Duid_Ids_Convert_CurrentOutputDc; 
    case 4: return Duid_Ids_Convert_VoltageOutputDc; 
    case 7: return Duid_Ids_Convert_CurrentInputAc; 
    case 23: return Duid_Ids_Convert_MaxOutCurrentDc; 
    case 24: return Duid_Ids_Convert_VoltageInputDcDc; 
    case 25: return Duid_Ids_Convert_VoltageOutputDcDc; 
    case 26: return Duid_Ids_Convert_IsDcDcOutputActive; 
    case 27: return Duid_Ids_Convert_MaxOutCurrentDcDc; 
    case 5: return Duid_Ids_Convert_CurrentInputDcDc; 
    case 6: return Duid_Ids_Convert_CurrentOutputDcDc; 
    case 21: return Duid_Ids_Source_VoltageBattery; 
    case 31: return Duid_Ids_Source_CurrentBattery; 
    case 34: return Duid_Ids_Source_StatusOfCharge; 
    case 61: return Duid_Ops_Consume_PowerConsumer; 
    case 62: return Duid_Ops_Isolate_MaxFuseCurrent; 
    case 63: return Duid_Ops_Isolate_IsFuseBlown; 
    case 64: return Duid_Ops_Isolate_ResetFuse; 
    case 65: return Duid_Ops_Source_BatteryChargeResistance; 
    case 66: return Duid_Ops_Source_BatteryEnergy; 
    case 67: return Duid_Ops_Source_VoltOutputGenerator; 
    case 68: return Duid_Ops_Source_IsGeneratorOutputActive; 
    case 69: return Duid_Ops_Source_MaxOutCurrentGenerator; 
    case 70: return Duid_Ops_Source_CurrentGenerator; 
    case 1: return Duid_Victron_Network_RequestDataCgx; 
    case 2: return Duid_Victron_Network_ResponseDataCgx; 
    case 8: return Duid_Victron_Network_Dc0Voltage; 
    case 28: return Duid_Victron_Network_Dc0MidVoltage; 
    case 29: return Duid_Victron_Network_Dc0MidVoltageDeviation; 
    case 30: return Duid_Victron_Network_Dc0Current; 
    case 32: return Duid_Victron_Network_Dc0Power; 
    case 33: return Duid_Victron_Network_Dc1Voltage; 
    case 35: return Duid_Victron_Network_Soc; 
    case 36: return Duid_Victron_Network_ConsumedAmphours; 
    case 37: return Duid_Victron_Network_Dc0Temperature; 
    } // switch
}
