// !!! This C++ file is generated by ioStudio !!!
#if !defined(__STEERCPDATA_H)
#define __STEERCPDATA_H
#include "ioSystem/Data/ioDataCollection.h"
#include "ioSystem/Data/ioVar.h"
#include "Programs/ioSystemData.h"
#include "ioSystem/Data/ioEnumeration.h"
#include "ioSystem/Data/ioEvent.h"
#include "ioSystem/Data/ioMethod.h"
class SteerModeType : public ioEnumeration
{
public:
    SteerModeType();
    virtual ~SteerModeType();
    virtual Bool GetActiveText(ioString* enumText);
    static const Int32 STANDBY = 0;
    static const Int32 RIVER = 1;
    static const Int32 AUTO = 2;
    static const Int32 TRACK = 3;
    static const Int32 WORK = 4;
    static const Int32 DP = 5;
};
class ActiveStationType : public ioEnumeration
{
public:
    ActiveStationType();
    virtual ~ActiveStationType();
    virtual Bool GetActiveText(ioString* enumText);
    static const Int32 CMD_AT_AFT_COCKPIT = 0;
    static const Int32 CMD_AT_MID_DECKHOUSE = 1;
};
class StationModeType : public ioEnumeration
{
public:
    StationModeType();
    virtual ~StationModeType();
    virtual Bool GetActiveText(ioString* enumText);
    static const Int32 NO_COMMAND = 0;
    static const Int32 TAKEN = 1;
    static const Int32 REMOTE_CONTROL = 2;
    static const Int32 TAKEN_AND_LOCKED = 3;
    static const Int32 TAKE_OVER_REQUEST = 4;
};
class SteerCpData : public ioDataCollectionDynamic
{
public:
    SteerCpData();
    virtual ~SteerCpData();
    virtual void InitializeData(void);
    ioMethod TakeCommand;
    ioMethod ModeDp;
    ioMethod ModeRiver;
    ioMethod ModeTrack;
    ioMethod ModeWork;
    ioMethod ModeAuto;
    ioMethod ModeStandby;
    SteerModeType SteerMode;
    ioMethod Release;
    ioEvent OnChangeCommand;
    ioEvent OnChangeSteerMode;
    ioMethod LeftSmall;
    ioMethod MidZero;
    ioMethod RightSmall;
    ioMethod LeftBig;
    ioMethod RightBig;
    ioMethod EncoderNumber;
    ActiveStationType ActiveStation;
    StationModeType StationMode;
protected:
    ioData* m_ListData[19];
    ioVar* m_OnChangeCommandVars[2];
    ioVar* m_OnChangeSteerModeVars[1];
};
#endif // __STEERCPDATA_H
