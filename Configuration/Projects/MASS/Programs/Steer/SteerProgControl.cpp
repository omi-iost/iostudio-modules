// !!! This C++ file is generated by ioStudio !!!
#include "pch.h"
#pragma hdrstop
#include "SteerProgControl.h"
#include "Programs/ioSystemGraphics.h"
#include "Programs/ioSystemPorts.h"
SteerProgControl::SteerProgControl()
{
}
SteerProgControl::~SteerProgControl()
{
}
void SteerProgControl::InitializeTask(void)
{
    ioProgram::InitializeTask();
}
void SteerProgControl::Run(Int32 activeSlot)
{
    if (activeSlot == 0) {}
}
void SteerProgControl::ReceiveData(ioDataCollection* listData, ioData* data)
{
    ioVarInt32 in1_Int32;
    ioVarInt32 in2_Int32;
    if (listData == NULL) {}
    if (data == NULL) {}
    else
    {
        ioSystemDataType duid = ioSystemData::GetDataType(data->GetDataID());
        switch (duid)
        {
        case Duid_Steer_CpA_TakeCommandSteer:
            in1_Int32.SetValue(1);
            OnRecvTakeCommandSteer(&in1_Int32);
            SendData(&DataControlCpA.OnChangeCommandSteer, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            SendData(&DataControlCpM.OnChangeCommandSteer, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            break;
        case Duid_Steer_CpM_TakeCommandSteer:
            in1_Int32.SetValue(0);
            OnRecvTakeCommandSteer(&in1_Int32);
            SendData(&DataControlCpM.OnChangeCommandSteer, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            SendData(&DataControlCpA.OnChangeCommandSteer, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            break;
        case Duid_Steer_ApM_OnRequestSteerData:
            in1_Int32.SetValue(1);
            OnRecvRequestSteerData(&in1_Int32);
            break;
        case Duid_Steer_CpM_ModeStandby:
            in1_Int32.SetValue(0);
            in2_Int32.SetValue(0);
            OnRecvSteerMode(&in1_Int32, &in2_Int32);
            SendData(&DataControlCpM.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            SendData(&DataControlCpA.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            break;
        case Duid_Steer_CpM_ModeAuto:
            in1_Int32.SetValue(0);
            in2_Int32.SetValue(2);
            OnRecvSteerMode(&in1_Int32, &in2_Int32);
            SendData(&DataControlCpM.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            SendData(&DataControlCpA.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            break;
        case Duid_Steer_CpA_ModeStandby:
            in1_Int32.SetValue(1);
            in2_Int32.SetValue(0);
            OnRecvSteerMode(&in1_Int32, &in2_Int32);
            SendData(&DataControlCpM.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            SendData(&DataControlCpA.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            break;
        case Duid_Steer_CpA_ModeAuto:
            in1_Int32.SetValue(1);
            in2_Int32.SetValue(2);
            OnRecvSteerMode(&in1_Int32, &in2_Int32);
            SendData(&DataControlCpM.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpM_12);
            SendData(&DataControlCpA.OnChangeSteerMode, ioPortProgramProtocol_System, (Int32)Nuid_NetEthernet_192_168_10_Ids_OpA_13);
            break;
        } // switch
    } // else
}
void SteerProgControl::OnRecvTakeCommandSteer(ioVarInt32* sender)
{
    if (sender == NULL) {};
}
void SteerProgControl::OnRecvRequestSteerData(ioVarInt32* sender)
{
    if (sender == NULL) {};
}
void SteerProgControl::OnRecvSteerMode(ioVarInt32* sender, ioVarInt32* steerMode)
{
    if (sender == NULL) {};
    if (steerMode == NULL) {};
}
