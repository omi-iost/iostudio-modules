// !!! This C++ file is generated by ioStudio !!!
#include "pch.h"
#pragma hdrstop
#include "ioSystemData.h"
TypeUnit::TypeUnit()
{
}
TypeUnit::~TypeUnit()
{
}
Bool TypeUnit::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"m/s"); return TRUE;
    case 1: enumText->Set((ioChars)"kt"); return TRUE;
    case 2: enumText->Set((ioChars)"kg"); return TRUE;
    case 3: enumText->Set((ioChars)"nm"); return TRUE;
    case 4: enumText->Set((ioChars)"m"); return TRUE;
    case 5: enumText->Set((ioChars)"Â°C"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
StationModeType::StationModeType()
{
}
StationModeType::~StationModeType()
{
}
Bool StationModeType::GetActiveText(ioString* enumText)
{
    if (enumText == NULL) return FALSE;
    Int32 activeID = GetValueSigned();
    switch (activeID)
    {
    case 0: enumText->Set((ioChars)"No command"); return TRUE;
    case 1: enumText->Set((ioChars)"Taken"); return TRUE;
    case 2: enumText->Set((ioChars)"Remote control"); return TRUE;
    case 3: enumText->Set((ioChars)"Taken and locked"); return TRUE;
    case 4: enumText->Set((ioChars)"Take over request"); return TRUE;
    default: enumText->Set((ioChars)"NotDefined");  return FALSE;
    } // switch
}
ioSystemData::ioSystemData()
{
}
ioSystemData::~ioSystemData()
{
}
Int32 ioSystemData::GetDataID(ioSystemDataType duid)
{
    return (Int32)duid;
}
ioSystemDataType ioSystemData::GetDataType(Int32 duidValue)
{
    switch (duidValue)
    {
    default: return Duid_NotDefined; 
    case 0: return Duid_NotDefined; 
    case 1: return Duid_Batt_ChargeInputVolt; 
    case 6: return Duid_Batt_StatusOfCharge; 
    case 5: return Duid_Batt_TimeTo10Percent; 
    case 356: return Duid_Batt_RequestBattDataOpM; 
    case 357: return Duid_Batt_RequestBattDataOpA; 
    case 12: return Duid_Batt_RequestDataDc12OpM; 
    case 18: return Duid_Batt_RequestDataDc12OpA; 
    case 358: return Duid_Batt_RequestDataDc24OpM; 
    case 4: return Duid_Batt_RequestDataDc24OpA; 
    case 7: return Duid_Batt_ResponseBattData; 
    case 8: return Duid_Batt_Dc12_BattVolt; 
    case 350: return Duid_Batt_Dc12_BattAmpM; 
    case 351: return Duid_Batt_Dc12_BattAmpF; 
    case 352: return Duid_Batt_Dc12_BattAmpA; 
    case 9: return Duid_Batt_Dc12_BattAmpOut; 
    case 10: return Duid_Batt_Dc12_BattAmpIn; 
    case 11: return Duid_Batt_Dc12_BattAmpAvg; 
    case 2: return Duid_Batt_Dc12_IsChargeActive; 
    case 13: return Duid_Batt_Dc12_ResponseDcData; 
    case 57: return Duid_Batt_Dc12_BattSoc; 
    case 14: return Duid_Batt_Dc24_BattVolt; 
    case 353: return Duid_Batt_Dc24_BattAmpM; 
    case 354: return Duid_Batt_Dc24_BattAmpF; 
    case 355: return Duid_Batt_Dc24_BattAmpA; 
    case 15: return Duid_Batt_Dc24_BattAmpOut; 
    case 16: return Duid_Batt_Dc24_BattAmpIn; 
    case 17: return Duid_Batt_Dc24_BattAmpAvg; 
    case 3: return Duid_Batt_Dc24_IsChargeActive; 
    case 19: return Duid_Batt_Dc24_ResponseDcData; 
    case 58: return Duid_Batt_Dc24_BattSoc; 
    case 20: return Duid_Pow_CpM_TakeCommandPow; 
    case 21: return Duid_Pow_CpM_ReleaseCommandPow; 
    case 22: return Duid_Pow_CpM_ActiveStationPow; 
    case 23: return Duid_Pow_CpM_OnChangeCommandPow; 
    case 24: return Duid_Pow_CpM_StationModePow; 
    case 25: return Duid_Pow_CpM_PowModeIdle; 
    case 26: return Duid_Pow_CpM_PowModeShore; 
    case 27: return Duid_Pow_CpM_PowModeDisconnect; 
    case 28: return Duid_Pow_CpM_PowModeTransitDay; 
    case 29: return Duid_Pow_CpM_PowModeTransitNightEngine; 
    case 30: return Duid_Pow_CpM_PowModeTransitNightSail; 
    case 31: return Duid_Pow_CpM_PowMode; 
    case 32: return Duid_Pow_CpM_OnChangePowMode; 
    case 33: return Duid_Pow_CpA_TakeCommandPow; 
    case 34: return Duid_Pow_CpA_ReleaseCommandPow; 
    case 35: return Duid_Pow_CpA_ActiveStationPow; 
    case 36: return Duid_Pow_CpA_OnChangeCommandPow; 
    case 37: return Duid_Pow_CpA_StationModePow; 
    case 38: return Duid_Pow_CpA_PowModeIdle; 
    case 39: return Duid_Pow_CpA_PowModeShore; 
    case 40: return Duid_Pow_CpA_PowModeDisconnect; 
    case 41: return Duid_Pow_CpA_PowModeTransitDay; 
    case 42: return Duid_Pow_CpA_PowModeTransitNightEngine; 
    case 43: return Duid_Pow_CpA_PowModeTransitNightSail; 
    case 44: return Duid_Pow_CpA_PowMode; 
    case 45: return Duid_Pow_CpA_OnChangePowMode; 
    case 46: return Duid_Pow_Out12M_OnCh1; 
    case 47: return Duid_Pow_Out12M_OnCh2; 
    case 48: return Duid_Pow_Out12M_OnCh3; 
    case 49: return Duid_Pow_Out12M_OnCh4; 
    case 50: return Duid_Pow_Out12M_OnCh5; 
    case 51: return Duid_Pow_Out12M_OnCh6; 
    case 52: return Duid_Pow_Out12M_OnCh7; 
    case 53: return Duid_Pow_Out12M_OnCh8; 
    case 54: return Duid_Pow_Out12M_OnOffCh; 
    case 55: return Duid_Pow_Out12M_SwitchOn; 
    case 56: return Duid_Pow_Out12M_SwitchOff; 
    case 70: return Duid_Pow_Out12M_OutStatus; 
    case 71: return Duid_Pow_Out12M_OnRequestPowData; 
    case 72: return Duid_Pow_Out12F_OnCh1; 
    case 73: return Duid_Pow_Out12F_OnCh2; 
    case 74: return Duid_Pow_Out12F_OnCh3; 
    case 75: return Duid_Pow_Out12F_OnCh4; 
    case 76: return Duid_Pow_Out12F_OnCh5; 
    case 77: return Duid_Pow_Out12F_OnCh6; 
    case 78: return Duid_Pow_Out12F_OnCh7; 
    case 79: return Duid_Pow_Out12F_OnCh8; 
    case 80: return Duid_Pow_Out12F_OnOffCh; 
    case 81: return Duid_Pow_Out12F_SwitchOn; 
    case 82: return Duid_Pow_Out12F_SwitchOff; 
    case 96: return Duid_Pow_Out12F_OutStatus; 
    case 97: return Duid_Pow_Out12F_OnRequestPowData; 
    case 98: return Duid_Pow_Out12A_OnCh1; 
    case 99: return Duid_Pow_Out12A_OnCh2; 
    case 100: return Duid_Pow_Out12A_OnCh3; 
    case 101: return Duid_Pow_Out12A_OnCh4; 
    case 102: return Duid_Pow_Out12A_OnCh5; 
    case 103: return Duid_Pow_Out12A_OnCh6; 
    case 104: return Duid_Pow_Out12A_OnCh7; 
    case 105: return Duid_Pow_Out12A_OnCh8; 
    case 106: return Duid_Pow_Out12A_OnOffCh; 
    case 107: return Duid_Pow_Out12A_SwitchOn; 
    case 108: return Duid_Pow_Out12A_SwitchOff; 
    case 122: return Duid_Pow_Out12A_OutStatus; 
    case 123: return Duid_Pow_Out12A_OnRequestPowData; 
    case 124: return Duid_Pow_Out24M_OnCh1; 
    case 125: return Duid_Pow_Out24M_OnCh2; 
    case 126: return Duid_Pow_Out24M_OnCh3; 
    case 127: return Duid_Pow_Out24M_OnCh4; 
    case 128: return Duid_Pow_Out24M_OnCh5; 
    case 129: return Duid_Pow_Out24M_OnCh6; 
    case 130: return Duid_Pow_Out24M_OnCh7; 
    case 131: return Duid_Pow_Out24M_OnCh8; 
    case 132: return Duid_Pow_Out24M_OnOffCh; 
    case 133: return Duid_Pow_Out24M_SwitchOn; 
    case 134: return Duid_Pow_Out24M_SwitchOff; 
    case 148: return Duid_Pow_Out24M_OutStatus; 
    case 149: return Duid_Pow_Out24M_OnRequestPowData; 
    case 150: return Duid_Pow_Out24F_OnCh1; 
    case 151: return Duid_Pow_Out24F_OnCh2; 
    case 152: return Duid_Pow_Out24F_OnCh3; 
    case 153: return Duid_Pow_Out24F_OnCh4; 
    case 154: return Duid_Pow_Out24F_OnCh5; 
    case 155: return Duid_Pow_Out24F_OnCh6; 
    case 156: return Duid_Pow_Out24F_OnCh7; 
    case 157: return Duid_Pow_Out24F_OnCh8; 
    case 158: return Duid_Pow_Out24F_OnOffCh; 
    case 159: return Duid_Pow_Out24F_SwitchOn; 
    case 160: return Duid_Pow_Out24F_SwitchOff; 
    case 174: return Duid_Pow_Out24F_OutStatus; 
    case 175: return Duid_Pow_Out24F_OnRequestPowData; 
    case 176: return Duid_Pow_Out24A_OnCh1; 
    case 177: return Duid_Pow_Out24A_OnCh2; 
    case 178: return Duid_Pow_Out24A_OnCh3; 
    case 179: return Duid_Pow_Out24A_OnCh4; 
    case 180: return Duid_Pow_Out24A_OnCh5; 
    case 181: return Duid_Pow_Out24A_OnCh6; 
    case 182: return Duid_Pow_Out24A_OnCh7; 
    case 183: return Duid_Pow_Out24A_OnCh8; 
    case 184: return Duid_Pow_Out24A_OnOffCh; 
    case 185: return Duid_Pow_Out24A_SwitchOn; 
    case 186: return Duid_Pow_Out24A_SwitchOff; 
    case 200: return Duid_Pow_Out24A_OutStatus; 
    case 201: return Duid_Pow_Out24A_OnRequestPowData; 
    case 202: return Duid_Pow_Out220M_OnCh1; 
    case 203: return Duid_Pow_Out220M_OnCh2; 
    case 204: return Duid_Pow_Out220M_OnCh3; 
    case 205: return Duid_Pow_Out220M_OnCh4; 
    case 206: return Duid_Pow_Out220M_OnCh5; 
    case 207: return Duid_Pow_Out220M_OnCh6; 
    case 208: return Duid_Pow_Out220M_OnCh7; 
    case 209: return Duid_Pow_Out220M_OnCh8; 
    case 210: return Duid_Pow_Out220M_OnOffCh; 
    case 211: return Duid_Pow_Out220M_SwitchOn; 
    case 212: return Duid_Pow_Out220M_SwitchOff; 
    case 226: return Duid_Pow_Out220M_OutStatus; 
    case 227: return Duid_Pow_Out220M_OnRequestPowData; 
    case 228: return Duid_Pow_Out220F_OnCh1; 
    case 229: return Duid_Pow_Out220F_OnCh2; 
    case 230: return Duid_Pow_Out220F_OnCh3; 
    case 231: return Duid_Pow_Out220F_OnCh4; 
    case 232: return Duid_Pow_Out220F_OnCh5; 
    case 233: return Duid_Pow_Out220F_OnCh6; 
    case 234: return Duid_Pow_Out220F_OnCh7; 
    case 235: return Duid_Pow_Out220F_OnCh8; 
    case 236: return Duid_Pow_Out220F_OnOffCh; 
    case 237: return Duid_Pow_Out220F_SwitchOn; 
    case 238: return Duid_Pow_Out220F_SwitchOff; 
    case 252: return Duid_Pow_Out220F_OutStatus; 
    case 253: return Duid_Pow_Out220F_OnRequestPowData; 
    case 254: return Duid_Pow_Out220A_OnCh1; 
    case 255: return Duid_Pow_Out220A_OnCh2; 
    case 256: return Duid_Pow_Out220A_OnCh3; 
    case 257: return Duid_Pow_Out220A_OnCh4; 
    case 258: return Duid_Pow_Out220A_OnCh5; 
    case 259: return Duid_Pow_Out220A_OnCh6; 
    case 260: return Duid_Pow_Out220A_OnCh7; 
    case 261: return Duid_Pow_Out220A_OnCh8; 
    case 262: return Duid_Pow_Out220A_OnOffCh; 
    case 263: return Duid_Pow_Out220A_SwitchOn; 
    case 264: return Duid_Pow_Out220A_SwitchOff; 
    case 265: return Duid_Pow_Out220A_OutStatus; 
    case 266: return Duid_Pow_Out220A_OnRequestPowData; 
    case 280: return Duid_Steer_ApM_RudderAngleMeas; 
    case 281: return Duid_Steer_ApM_FrontThrustMeas; 
    case 282: return Duid_Steer_ApM_RateOfTurnMeas; 
    case 283: return Duid_Steer_ApM_HeadingMeas; 
    case 284: return Duid_Steer_ApM_FrontThrustRef; 
    case 285: return Duid_Steer_ApM_OnChangeRef; 
    case 286: return Duid_Steer_ApM_HeadingRef; 
    case 287: return Duid_Steer_ApM_RateOfTurnRef; 
    case 288: return Duid_Steer_ApM_RudderAngleRef; 
    case 289: return Duid_Steer_ApM_OnRequestSteerData; 
    case 290: return Duid_Steer_ApM_OnChangeCompass; 
    case 291: return Duid_Steer_ApM_OnChangeRudder; 
    case 292: return Duid_Steer_ApM_OnChangeThrust; 
    case 293: return Duid_Steer_ApM_EngineRpmMeas; 
    case 294: return Duid_Steer_ApM_EngineRpmRef; 
    case 295: return Duid_Steer_ApM_OnChangeEngine; 
    case 296: return Duid_Steer_ApA_RudderAngleMeas; 
    case 297: return Duid_Steer_ApA_FrontThrustMeas; 
    case 298: return Duid_Steer_ApA_RateOfTurnMeas; 
    case 299: return Duid_Steer_ApA_HeadingMeas; 
    case 300: return Duid_Steer_ApA_FrontThrustRef; 
    case 301: return Duid_Steer_ApA_OnChangeRef; 
    case 302: return Duid_Steer_ApA_HeadingRef; 
    case 303: return Duid_Steer_ApA_RateOfTurnRef; 
    case 304: return Duid_Steer_ApA_RudderAngleRef; 
    case 305: return Duid_Steer_ApA_OnRequestSteerData; 
    case 306: return Duid_Steer_ApA_OnChangeCompass; 
    case 307: return Duid_Steer_ApA_OnChangeRudder; 
    case 308: return Duid_Steer_ApA_OnChangeThrust; 
    case 309: return Duid_Steer_ApA_EngineRpmMeas; 
    case 310: return Duid_Steer_ApA_EngineRpmRef; 
    case 311: return Duid_Steer_ApA_OnChangeEngine; 
    case 312: return Duid_Steer_CpM_ActiveStationSteer; 
    case 313: return Duid_Steer_CpM_StationModeSteer; 
    case 314: return Duid_Steer_CpM_TakeCommandSteer; 
    case 315: return Duid_Steer_CpM_ReleaseCommandSteer; 
    case 316: return Duid_Steer_CpM_OnChangeCommandSteer; 
    case 317: return Duid_Steer_CpM_ModeDp; 
    case 318: return Duid_Steer_CpM_ModeRiver; 
    case 319: return Duid_Steer_CpM_ModeTrack; 
    case 320: return Duid_Steer_CpM_ModeWork; 
    case 321: return Duid_Steer_CpM_ModeAuto; 
    case 322: return Duid_Steer_CpM_ModeStandby; 
    case 323: return Duid_Steer_CpM_SteerMode; 
    case 324: return Duid_Steer_CpM_OnChangeSteerMode; 
    case 325: return Duid_Steer_CpM_LeftSmall; 
    case 326: return Duid_Steer_CpM_MidZero; 
    case 327: return Duid_Steer_CpM_RightSmall; 
    case 328: return Duid_Steer_CpM_LeftBig; 
    case 329: return Duid_Steer_CpM_RightBig; 
    case 330: return Duid_Steer_CpM_EncoderNumber; 
    case 331: return Duid_Steer_CpA_ActiveStationSteer; 
    case 332: return Duid_Steer_CpA_StationModeSteer; 
    case 333: return Duid_Steer_CpA_TakeCommandSteer; 
    case 334: return Duid_Steer_CpA_ReleaseCommandSteer; 
    case 335: return Duid_Steer_CpA_OnChangeCommandSteer; 
    case 336: return Duid_Steer_CpA_ModeDp; 
    case 337: return Duid_Steer_CpA_ModeRiver; 
    case 338: return Duid_Steer_CpA_ModeTrack; 
    case 339: return Duid_Steer_CpA_ModeWork; 
    case 340: return Duid_Steer_CpA_ModeAuto; 
    case 341: return Duid_Steer_CpA_ModeStandby; 
    case 342: return Duid_Steer_CpA_SteerMode; 
    case 343: return Duid_Steer_CpA_OnChangeSteerMode; 
    case 344: return Duid_Steer_CpA_LeftSmall; 
    case 345: return Duid_Steer_CpA_MidZero; 
    case 346: return Duid_Steer_CpA_RightSmall; 
    case 347: return Duid_Steer_CpA_LeftBig; 
    case 348: return Duid_Steer_CpA_RightBig; 
    case 349: return Duid_Steer_CpA_EncoderNumber; 
    } // switch
}
