// !!! This C++ file is generated by ioStudio !!!
#include "pch.h"
#pragma hdrstop
#include "BattProgSensor.h"
#include "Programs/ioSystemGraphics.h"
#include "Programs/ioSystemPorts.h"
BattProgSensor::BattProgSensor()
{
}
BattProgSensor::~BattProgSensor()
{
}
void BattProgSensor::InitializeTask(void)
{
    ioProgram::InitializeTask();
}
void BattProgSensor::Run(Int32 activeSlot)
{
    ioVarInt32 in1_Int32;
    ioVarFloat in2_Float;
    ioVarFloat in3_Float;
    ioVarFloat in4_Float;
    ioVarFloat out1_Float;
    ioVarFloat in1_Float;
    ioVarTimeInterval out2_TimeInterval;
    if (activeSlot == 0) {}
    in1_Int32.SetValue(0);
    in2_Float.SetValueVar(&DcDataDc12.BattAmpA);
    in3_Float.SetValueVar(&DcDataDc12.BattAmpM);
    in4_Float.SetValueVar(&DcDataDc12.BattAmpF);
    CalcCurrentOut(&in1_Int32, &in2_Float, &in3_Float, &in4_Float, &out1_Float);
    DcDataDc12.BattAmpOut.SetValueVar(&out1_Float);
    in1_Int32.SetValue(TypeDcBatt::DC24V);
    in2_Float.SetValueVar(&DcDataDc24.BattAmpA);
    in3_Float.SetValueVar(&DcDataDc24.BattAmpM);
    in4_Float.SetValueVar(&DcDataDc24.BattAmpF);
    CalcCurrentOut(&in1_Int32, &in2_Float, &in3_Float, &in4_Float, &out1_Float);
    DcDataDc24.BattAmpOut.SetValueVar(&out1_Float);
    in1_Float.SetValueVar(&DcDataDc12.BattAmpIn);
    in2_Float.SetValueVar(&DcDataDc12.BattAmpOut);
    in3_Float.SetValueVar(&DcDataDc12.BattVolt);
    CheckBattery(&in1_Float, &in2_Float, &in3_Float, &out1_Float);
    DcDataDc12.BattAmpAvg.SetValueVar(&out1_Float);
    in1_Float.SetValueVar(&DcDataDc24.BattAmpIn);
    in2_Float.SetValueVar(&DcDataDc24.BattAmpOut);
    in3_Float.SetValueVar(&DcDataDc24.BattVolt);
    CheckBattery(&in1_Float, &in2_Float, &in3_Float, &out1_Float);
    DcDataDc24.BattAmpAvg.SetValueVar(&out1_Float);
    in1_Float.SetValueVar(&DcDataDc12.BattAmpAvg);
    in2_Float.SetValueVar(&DcDataDc24.BattAmpAvg);
    CalcSoc(&in1_Float, &in2_Float, &out1_Float, &out2_TimeInterval);
    MainData.StatusOfCharge.SetValueVar(&out1_Float);
    MainData.TimeTo10Percent.SetValueVar(&out2_TimeInterval);
    GetInputVoltageCharger();
}
void BattProgSensor::CalcCurrentOut(ioVarInt32* typeBatt, ioVarFloat* currentOutA, ioVarFloat* currentOutM, ioVarFloat* currentOutF, ioVarFloat* currentOut)
{
    if (typeBatt == NULL) {};
    if (currentOutA == NULL) {};
    if (currentOutM == NULL) {};
    if (currentOutF == NULL) {};
    if (currentOut == NULL) {};
}
void BattProgSensor::CheckBattery(ioVarFloat* currentIn, ioVarFloat* currentOut, ioVarFloat* voltage, ioVarFloat* currentAvg)
{
    if (currentIn == NULL) {};
    if (currentOut == NULL) {};
    if (voltage == NULL) {};
    if (currentAvg == NULL) {};
}
void BattProgSensor::CalcSoc(ioVarFloat* currentAvg12V, ioVarFloat* currentAvg24V, ioVarFloat* soc, ioVarTimeInterval* timeTo10Perc)
{
    if (currentAvg12V == NULL) {};
    if (currentAvg24V == NULL) {};
    if (soc == NULL) {};
    if (timeTo10Perc == NULL) {};
}
void BattProgSensor::GetInputVoltageCharger(void)
{
}
